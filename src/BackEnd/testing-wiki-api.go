package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/url"
	"strings"
	"time"

	"golang.org/x/net/html"
)

type ResponseAPI struct {
	Path    [][]string    `json:"path"`
	Status  bool          `json:"status"`
	Message string        `json:"message"`
	Time    time.Duration `json:"time"`
}

type Page struct {
	Title  string `json:"title"`
	Pageid int    `json:"pageid"`
	Url    string `json:"url"`
	Status bool   `json:"status"`
}

type AutoGenerated struct {
	Batchcomplete bool `json:"batchcomplete"`
	Continue      struct {
		Sroffset int    `json:"sroffset"`
		Continue string `json:"continue"`
	} `json:"continue"`
	Query struct {
		Searchinfo struct {
			Totalhits         int    `json:"totalhits"`
			Suggestion        string `json:"suggestion"`
			Suggestionsnippet string `json:"suggestionsnippet"`
		} `json:"searchinfo"`
		Search []struct {
			Ns        int       `json:"ns"`
			Title     string    `json:"title"`
			Pageid    int       `json:"pageid"`
			Size      int       `json:"size"`
			Wordcount int       `json:"wordcount"`
			Snippet   string    `json:"snippet"`
			Timestamp time.Time `json:"timestamp"`
		} `json:"search"`
	} `json:"query"`
}

func PrettyPrint(i interface{}) string {
	s, _ := json.MarshalIndent(i, "", "\t")
	return string(s)
}

func formatParams(params map[string]string) string {
	queryString := "?"
	for key, value := range params {
		queryString += key + "=" + url.QueryEscape(value) + "&"
	}
	return queryString[:len(queryString)-1]
}

func isIn(s string, arr []string) bool {
	for _, elmt := range arr {
		if elmt == s {
			return true
		}
	}
	return false
}

/*
* Fungsi untuk searching dan get recommendation
 */
func sendApi(search string) Page {

	apiUrl := "https://en.wikipedia.org/w/api.php"
	webUrl := "https://en.wikipedia.org/wiki/"

	params := map[string]string{
		"action":        "query",
		"format":        "json",
		"formatversion": "2",
		"list":          "search",
		"srsearch":      search,
	}

	var ansPage Page

	client := &http.Client{
		Transport: &http.Transport{
			Proxy: http.ProxyFromEnvironment,
		},
	}

	// Create an HTTP request
	req, err := http.NewRequest("GET", apiUrl+formatParams(params), nil)
	if err != nil {
		fmt.Println("Error creating request:", err)
		ansPage.Status = false
		return ansPage
	}

	// Set the User-Agent header
	req.Header.Set("User-Agent", "WikiRaceSolverGoQuery/1.1")

	resp, err := client.Do(req)
	if err != nil {
		fmt.Println(err)
		ansPage.Status = false
		return ansPage
	}

	defer resp.Body.Close()
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Println(err)
		ansPage.Status = false
		return ansPage
	}

	var result AutoGenerated
	if err := json.Unmarshal(body, &result); err != nil {
		fmt.Println("Can not unmarshal JSON")
	}

	if len(result.Query.Search) == 0 {
		ansPage.Status = false
		return ansPage
	}

	ansPage.Pageid = result.Query.Search[0].Pageid
	ansPage.Title = result.Query.Search[0].Title
	ansPage.Url = webUrl + strings.ReplaceAll(ansPage.Title, " ", "_")
	ansPage.Status = true

	return ansPage
}

// func toFile(res []byte) {
// 	os.WriteFile("result", res, 0644)
// }

// func toFileS(res []string) {
// 	f, err := os.Create("result")
// 	if err != nil {
// 		fmt.Println(err)
// 	}
// 	w := bufio.NewWriter(f)

// 	temp_string := ""

// 	for _, element := range res {
// 		temp_string = temp_string + "\n" + element
// 	}

// 	n4, err := w.WriteString(temp_string)
// 	fmt.Println(n4)
// 	w.Flush()
// }

func timeTrack(start time.Time, name string, executedTime *time.Duration) {
	elapsed := time.Since(start)
	*executedTime = elapsed
	log.Printf("%s took %s", name, elapsed)

}

func customFileterURL(url string) bool {
	a := strings.HasPrefix(url, "/wiki/")
	namespace_list := []string{"User:", "File:", "MediaWiki:", "Template:", "Help:", "Category:", "Special:", "Talk:", "Template_talk:", "Wikipedia:", "Main_Page"}

	for _, elmt := range namespace_list {
		a = a && !strings.Contains(url, elmt)
	}
	return a
}

// Function to extract links from a node
func extractLinks(n *html.Node, links *[]string) {
	if n.Type == html.ElementNode && n.Data == "a" {
		for _, attr := range n.Attr {
			if attr.Key == "href" {
				if customFileterURL(attr.Val) {
					*links = append(*links, "https://en.wikipedia.org"+attr.Val)
				}
			}
		}
	}

	// Recursively extract links from child nodes
	for c := n.FirstChild; c != nil; c = c.NextSibling {
		extractLinks(c, links)
	}
}

func findLinksInContent(n *html.Node) []string {
	var links []string

	var traverse func(*html.Node)
	traverse = func(n *html.Node) {
		if n.Type == html.ElementNode && n.Data == "main" {
			for _, attr := range n.Attr {
				if attr.Key == "id" && attr.Val == "content" {
					// If found node with class "content", extract links
					extractLinks(n, &links)
					return
				}
			}
		}

		// Recursively traverse child nodes
		for c := n.FirstChild; c != nil; c = c.NextSibling {
			traverse(c)
		}
	}

	traverse(n)

	return links
}

func scrapWeb(url string) []string {
	resp, err := http.Get(url)
	if err != nil {
		fmt.Println(err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatal("Failed to read body response", err)
	}

	doc, err := html.Parse(bytes.NewReader(body))
	if err != nil {
		log.Fatal("Error parsing HTML", err)
	}

	// find all links
	final_ans := findLinksInContent(doc)

	// namespace_list := []string{"User:", "File:", "MediaWiki:", "Template:", "Help:", "Category:", "Special:", "Talk:", "Template_talk:", "Wikipedia:"}

	// urlHTML := doc.Find("#content").Find("a").FilterFunction(func(i int, s *goquery.Selection) bool {
	// 	link, _ := s.Attr("href")

	// 	a := strings.HasPrefix(link, "/wiki/")

	// 	for _, elmt := range namespace_list {
	// 		a = a && !strings.Contains(link, elmt)
	// 	}
	// 	return a
	// })

	// final_ans := urlHTML.Map(func(i int, s *goquery.Selection) string {
	// 	link, _ := s.Attr("href")

	// 	return "https://en.wikipedia.org" + link
	// })

	return final_ans
}

func main() {
	page1 := sendApi("Jokowi")
	page2 := sendApi("Central Java")

	// get initial value
	fmt.Println(PrettyPrint(page1))
	fmt.Println(PrettyPrint(page2))

	// start scraping
	// max_depth := 3
	bfsHandler(page1.Url, page2.Url)

	// x := IDS(page1.Url, page2.Url)
	// fmt.Println(x)
}
